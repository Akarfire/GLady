
// Wait for the HTML file to be fully loaded before running the code
document.addEventListener("DOMContentLoaded", onFileLoaded);

function onFileLoaded()
{
    // setInterval(() => {
    // newMessage("ae_Cookie", "hey", "rgba(255, 104, 227, 1)");}, 1000);

    const popOutButton = document.getElementById("popout_button");
    popOutButton.addEventListener("click", openPopoutChat);

    const socket = new WebSocket("ws://localhost:8000");

    socket.onopen = () => {
        console.log("Connected to server!");
    };

    
    socket.onmessage = (event) => {
        try 
        {
            console.log("Receiving message data: ", event.data);

            // WebSocket messages are text (UTF-8 decoded by default)
            const data = JSON.parse(event.data);

            // Validate required fields
            if (typeof data.UserName === "string" && typeof data.Message === "string") 
            {
                const randomColor = nameToColor(data.UserName)
                newMessage(data.UserName, data.Message, randomColor);
            } 

            else 
            {
                console.warn("Received malformed message data:", data);
            }
        } 

        catch (err) 
        {
            console.error("Failed to parse WebSocket message:", err, event.data);
        }
    };

    socket.onerror = (err) => {
        console.error("WebSocket error:", err);
    };

    socket.onclose = () => {
        console.log("Disconnected from server");
    };
}


// This was generated by ChatGPT
function nameToColor(name) 
{
    // Simple hash function to turn the string into a number
    let hash = 0;
    for (let i = 0; i < name.length; i++) 
    {
        hash = name.charCodeAt(i) + ((hash << 5) - hash);
    }

    // Map hash to a hue (0â€“360)
    const hue = Math.abs(hash) % 360;

    // Use HSL for vivid, consistent colors
    return `hsl(${hue}, 70%, 60%)`;
}


function newMessage(user_name, message, user_color)
{
    let message_template = document.getElementById("message_template");
    let message_container = document.getElementById("message_container");

    let clone = message_template.content.cloneNode(true).querySelector(".message_div");

    // Customizing message
    let user_name_text = clone.querySelector(".user_name");
    let message_text = clone.querySelector(".message_text");

    user_name_text.textContent = user_name;
    message_text.textContent = message;

    user_name_text.style.color = user_color;
    
    // Appening message
    message_container.appendChild(clone);

    // Cleaning up old messages
    let messages = document.querySelectorAll('.message_div');
    if (messages.length > 100)
    {
        messages[0].remove();
    }
    
    if (message_container.scrollHeight - message_container.scrollTop - message_container.clientHeight < 200)
    {
        message_container.scrollTo({ top: message_container.scrollHeight, behavior: "smooth" });
    }

    // Force reflow (forces browser to register current position/opacity)
    clone.offsetWidth; // reading this value triggers reflow

    requestAnimationFrame(() => { clone.classList.add("show"); });
}


function openPopoutChat() 
{
    const url = document.URL;
    const features = "width=400,height=600,menubar=no,toolbar=no,location=no,status=no,resizable=yes,scrollbars=no";
    const chatWindow = window.open(url, "ChatWindow", features);
}